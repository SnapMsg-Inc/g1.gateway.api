definitions:
  models.Post:
    properties:
      hashtags:
        items:
          type: string
        type: array
      likes:
        type: integer
      media_uri:
        items:
          type: string
        type: array
      nick:
        type: string
      pid:
        type: integer
      text:
        type: string
      timestamp:
        type: string
      uid:
        type: string
    type: object
  models.PostCreate:
    properties:
      hashtags:
        items:
          type: string
        type: array
      is_private:
        type: boolean
      media_uri:
        items:
          type: string
        type: array
      text:
        type: string
    type: object
  models.PostUpdate:
    properties:
      hashtags:
        items:
          type: string
        type: array
      is_private:
        type: boolean
      media_uri:
        items:
          type: string
        type: array
      text:
        type: string
    type: object
  models.User:
    properties:
      alias:
        type: string
      birthdate:
        example: YYYY-MM-DD
        type: string
      email:
        type: string
      followers:
        type: integer
      follows:
        type: integer
      fullname:
        type: string
      interests:
        items:
          type: string
        type: array
      is_admin:
        type: boolean
      nick:
        type: string
      ocupation:
        type: string
      pic:
        type: string
      uid:
        type: string
      zone:
        additionalProperties:
          type: number
        example:
          latitude: 0
          longitude: 0
        type: object
    type: object
  models.UserCreate:
    properties:
      alias:
        type: string
      birthdate:
        example: YYYY-MM-DD
        type: string
      email:
        type: string
      fullname:
        type: string
      interests:
        items:
          type: string
        type: array
      nick:
        type: string
      ocupation:
        type: string
      pic:
        type: string
      zone:
        additionalProperties:
          type: number
        example:
          latitude: 0
          longitude: 0
        type: object
    type: object
  models.UserPublic:
    properties:
      alias:
        type: string
      followers:
        type: integer
      follows:
        type: integer
      interests:
        items:
          type: string
        type: array
      nick:
        type: string
      pic:
        type: string
      uid:
        type: string
    type: object
info:
  contact: {}
  title: SnapMsg API
  version: "1.0"
paths:
  /admin/post/:pid:
    delete:
      consumes:
      - application/json
      parameters:
      - description: post id to delete
        in: path
        name: pid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Delete a given post
      tags:
      - admin methods
  /admin/users/:uid:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user id to delete
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Delete a given user
      tags:
      - admin methods
    post:
      consumes:
      - application/json
      parameters:
      - description: user id to become admin
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Create an admin user giving existing user
      tags:
      - admin methods
  /posts:
    get:
      consumes:
      - application/json
      parameters:
      - collectionFormat: csv
        description: hashtags
        in: query
        items:
          type: string
        name: hashtags
        type: array
      - description: author's nickname
        in: query
        name: nick
        type: string
      - description: text to match
        in: query
        name: text
        type: string
      - default: 100
        description: limit
        in: query
        maximum: 100
        minimum: 0
        name: limit
        required: true
        type: integer
      - default: 0
        description: page
        in: query
        minimum: 0
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
      security:
      - Bearer: []
      summary: Get posts filtering by query
      tags:
      - posts methods
    post:
      consumes:
      - application/json
      parameters:
      - description: data for the new post
        in: body
        name: PostCreate
        required: true
        schema:
          $ref: '#/definitions/models.PostCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Create a new post
      tags:
      - posts methods
  /posts/{pid}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: post id to delete
        in: path
        name: pid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Delete post owned by current user
      tags:
      - posts methods
    patch:
      consumes:
      - application/json
      parameters:
      - description: post id to update
        in: path
        name: pid
        required: true
        type: string
      - description: data for update the post
        in: body
        name: PostUpdate
        required: true
        schema:
          $ref: '#/definitions/models.PostUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
      security:
      - Bearer: []
      summary: Update some fields of a post
      tags:
      - posts methods
  /posts/favs:
    get:
      consumes:
      - application/json
      parameters:
      - default: 100
        description: limit
        in: query
        maximum: 100
        minimum: 0
        name: limit
        required: true
        type: integer
      - default: 0
        description: page
        in: query
        minimum: 0
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
      security:
      - Bearer: []
      summary: List user fav posts
      tags:
      - posts methods
  /posts/favs/{pid}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: post id to unfav
        in: path
        name: pid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Remove a post from user favs
      tags:
      - posts methods
    post:
      consumes:
      - application/json
      parameters:
      - description: post id to mark as fav
        in: path
        name: pid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Add a post to user favs
      tags:
      - posts methods
  /posts/feed:
    get:
      consumes:
      - application/json
      parameters:
      - default: 100
        description: limit
        in: query
        maximum: 100
        minimum: 0
        name: limit
        required: true
        type: integer
      - default: 0
        description: page
        in: query
        minimum: 0
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
      security:
      - Bearer: []
      summary: Get feed of the user making the request
      tags:
      - posts methods
  /posts/like/{pid}:
    get:
      consumes:
      - application/json
      parameters:
      - description: pid to check like
        in: path
        name: pid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      security:
      - Bearer: []
      summary: Check if current user liked a given post
      tags:
      - posts methods
  /posts/likes/{pid}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: post id to unlike
        in: path
        name: pid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Unlike a post
      tags:
      - posts methods
    post:
      consumes:
      - application/json
      parameters:
      - description: post id to like
        in: path
        name: pid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Add a like to a post
      tags:
      - posts methods
  /posts/me:
    get:
      consumes:
      - application/json
      parameters:
      - collectionFormat: csv
        description: hashtags
        in: query
        items:
          type: string
        name: hashtags
        type: array
      - description: text to match
        in: query
        name: text
        type: string
      - default: 100
        description: limit
        in: query
        maximum: 100
        minimum: 0
        name: limit
        required: true
        type: integer
      - default: 0
        description: page
        in: query
        minimum: 0
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
      security:
      - Bearer: []
      summary: Get posts filtering by query
      tags:
      - posts methods
  /posts/recommended:
    get:
      consumes:
      - application/json
      parameters:
      - default: 100
        description: limit
        in: query
        maximum: 100
        minimum: 0
        name: limit
        required: true
        type: integer
      - default: 0
        description: page
        in: query
        minimum: 0
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
      security:
      - Bearer: []
      summary: Get recommended posts for a user
      tags:
      - posts methods
  /users:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: user id
        in: query
        name: uid
        type: string
      - description: user email
        in: query
        name: email
        type: string
      - description: user nickname
        in: query
        name: nick
        type: string
      - description: max results
        in: query
        name: limit
        required: true
        type: integer
      - description: page number
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserPublic'
            type: array
      security:
      - Bearer: []
      summary: List public users data filtering by query
      tags:
      - users methods
      x-order: "1"
    post:
      consumes:
      - application/json
      parameters:
      - description: User creation data
        in: body
        name: userinfo
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Create a user
      tags:
      - users methods
      x-order: "0"
  /users/{uid}/followers:
    get:
      consumes:
      - application/json
      parameters:
      - description: user id to list followers
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: List followers of given user
      tags:
      - users methods
  /users/{uid}/follows:
    get:
      consumes:
      - application/json
      parameters:
      - description: user id to list follows
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: List follows of a given user
      tags:
      - users methods
  /users/{uid}/follows/{otheruid}:
    get:
      consumes:
      - application/json
      parameters:
      - description: user id who follows
        in: path
        name: uid
        required: true
        type: string
      - description: the user id beeing followed
        in: path
        name: otheruid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - Bearer: []
      summary: Check if uid follows otheruid
      tags:
      - users methods
  /users/me:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Delete the user making the request
      tags:
      - users methods
    get:
      consumes:
      - '*/*'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - Bearer: []
      summary: Get private data of current user
      tags:
      - users methods
    patch:
      consumes:
      - application/json
      parameters:
      - description: new nickname
        in: query
        name: nick
        type: string
      - collectionFormat: csv
        description: new interests
        in: query
        items:
          type: string
        name: interests
        type: array
      - description: new profile picture
        in: query
        name: pic
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Update current user data
      tags:
      - users methods
  /users/me/follows/{uid}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user id to unfollow
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Unfollow a given user
      tags:
      - users methods
    post:
      consumes:
      - application/json
      parameters:
      - description: user id to follow
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Follow a given user
      tags:
      - users methods
  /users/me/recommended:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserPublic'
            type: array
      security:
      - Bearer: []
      summary: Recommend users for the user making the request
      tags:
      - users methods
      x-order: "2"
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and Firebase JWT.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
